name: 'Shared Hosting CI/CD'
description: 'Deploy Laravel applications to shared hosting environments'
author: 'thaolaptrinh'

inputs:
  # Framework Configuration
  framework:
    description: 'Framework type (laravel)'
    required: true
    default: 'laravel'
  php_version:
    description: 'PHP version to use'
    required: true
    default: '8.2'

  # SSH Configuration
  ssh_private_key:
    description: 'SSH private key for deployment'
    required: true
  ssh_host:
    description: 'SSH host address'
    required: true
  ssh_username:
    description: 'SSH username'
    required: true
  remote_path:
    description: 'Remote path on shared hosting'
    required: true

  # Application Configuration
  app_url:
    description: 'Application URL'
    required: true
  app_env:
    description: 'Application environment'
    required: false
    default: 'production'

  # Deployment Options
  skip_backup:
    description: 'Skip creating backup before deployment'
    required: false
    default: 'false'
  skip_migrations:
    description: 'Skip running database migrations'
    required: false
    default: 'false'
  skip_health_check:
    description: 'Skip health check after deployment'
    required: false
    default: 'false'

runs:
  using: "composite"
  steps:
    # Setup Environment
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ inputs.php_version }}
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, dom, filter, gd, json, libxml, openssl, pdo, tokenizer, xmlwriter, zip, fileinfo
        coverage: none

    # Cache Dependencies
    - name: Get Composer Cache Directory
      id: composer-cache
      shell: bash
      run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

    - name: Cache Composer dependencies
      uses: actions/cache@v3
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-

    # Install Dependencies
    - name: Install Dependencies
      shell: bash
      run: |
        composer install --no-dev --optimize-autoloader
        php artisan key:generate
        php artisan config:cache
        php artisan route:cache
        php artisan view:cache

    # Setup SSH
    - name: Create SSH Directory
      shell: bash
      run: mkdir -p ~/.ssh/

    - name: Install SSH Key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ inputs.ssh_private_key }}
        known_hosts: unnecessary
        if_key_exists: replace

    # Deployment
    - name: Create Backup
      if: inputs.skip_backup != 'true'
      shell: bash
      run: |
        ssh -o StrictHostKeyChecking=no ${{ inputs.ssh_username }}@${{ inputs.ssh_host }} "cd ${{ inputs.remote_path }} && tar -czf backup-$(date +%Y%m%d-%H%M%S).tar.gz ."

    - name: Deploy Files
      shell: bash
      run: |
        rsync -avz --delete \
          --exclude '.git*' \
          --exclude 'node_modules' \
          --exclude 'vendor' \
          --exclude '.env' \
          --exclude 'storage/*.key' \
          --exclude 'tests' \
          --exclude 'phpunit.xml' \
          --exclude '.phpunit.result.cache' \
          --exclude 'storage/logs/*' \
          --exclude 'storage/framework/cache/*' \
          --exclude 'storage/framework/sessions/*' \
          --exclude 'storage/framework/views/*' \
          ./ ${{ inputs.ssh_username }}@${{ inputs.ssh_host }}:${{ inputs.remote_path }}/

    # Post-deployment Tasks
    - name: Run Post-deployment Tasks
      shell: bash
      run: |
        ssh -o StrictHostKeyChecking=no ${{ inputs.ssh_username }}@${{ inputs.ssh_host }} "cd ${{ inputs.remote_path }} && \
          composer install --no-dev --optimize-autoloader && \
          php artisan config:cache && \
          php artisan route:cache && \
          php artisan view:cache && \
          php artisan storage:link && \
          php artisan queue:restart"

    - name: Run Migrations
      if: inputs.skip_migrations != 'true'
      shell: bash
      run: |
        ssh -o StrictHostKeyChecking=no ${{ inputs.ssh_username }}@${{ inputs.ssh_host }} "cd ${{ inputs.remote_path }} && php artisan migrate --force"

    # Health Check
    - name: Health Check
      if: inputs.skip_health_check != 'true'
      shell: bash
      run: |
        curl -f ${{ inputs.app_url }} || exit 1 